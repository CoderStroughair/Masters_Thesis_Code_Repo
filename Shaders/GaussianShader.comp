#version 430
layout (local_size_x = 8, local_size_y = 8, local_size_z = 16) in;
layout (r8, binding = 0) uniform image3D initialData;
layout (r8, binding = 1) uniform image3D gaussian;

float kernel3D[5][5][5] = {	// 3DArray[x][y][z]
	{//[x = 0]
		{0.0, 0.0, 1.0, 0.0, 0.0},//[y = 0]
		{0.0, 1.0, 4.0, 1.0, 0.0},//[y = 1]
		{1.0, 4.0, 7.0, 4.0, 1.0},//[y = 2]
		{0.0, 1.0, 4.0, 1.0, 0.0},//[y = 3]
		{0.0, 0.0, 1.0, 0.0, 0.0} //[y = 4]
	},
	{//[x = 1]
		{0.0,  1.0,  4.0,  1.0, 0.0},
		{1.0,  7.0, 16.0,  7.0, 1.0},
		{4.0, 16.0, 26.0, 16.0, 4.0},
		{1.0,  7.0, 16.0,  7.0, 1.0},
		{0.0,  1.0,  4.0,  1.0, 0.0}
	},
	{//[x = 2]
		{1.0,  4.0,  7.0,  4.0, 1.0},
		{4.0, 16.0, 26.0, 16.0, 4.0},
		{7.0, 26.0, 82.0, 26.0, 7.0},
		{4.0, 16.0, 26.0, 16.0, 4.0},
		{1.0,  4.0,  7.0,  4.0, 1.0}
	},
	{//[x = 3]
		{0.0,  1.0,  4.0,  1.0, 0.0},
		{1.0,  7.0, 16.0,  7.0, 1.0},
		{4.0, 16.0, 26.0, 16.0, 4.0},
		{1.0,  7.0, 16.0,  7.0, 1.0},
		{0.0,  1.0,  4.0,  1.0, 0.0}
	},
	{//[x = 4]
		{0.0, 0.0, 1.0, 0.0, 0.0},
		{0.0, 1.0, 4.0, 1.0, 0.0},
		{1.0, 4.0, 7.0, 4.0, 1.0},
		{0.0, 1.0, 4.0, 1.0, 0.0},
		{0.0, 0.0, 1.0, 0.0, 0.0}
	}
};

void main()
{
	vec3 dims = imageSize(initialData);
	vec3 position = gl_GlobalInvocationID.xyz;
	float total;
	for (int x = -2; x < 2; x++)
	{
		for (int y = -2; y < 2; y++)
		{
			for (int z = -2; z < 2; z++)
			{
				ivec3 pixel_pos = ivec3(x+position.x,y+position.y,z+position.z);
				if(pixel_pos.x >= dims.x || pixel_pos.x < 0 || pixel_pos.y >= dims.y || pixel_pos.y < 0 || pixel_pos.z >= dims.z || pixel_pos.z < 0)
					continue;
				
				total = imageLoad(initialData, pixel_pos).x * kernel3D[x+2][y+2][z+2];
			}
		}
	}
	total /= 648;
	imageStore(gaussian, ivec3(gl_GlobalInvocationID), vec4(total, 0.0, 0.0, 1.0));
}