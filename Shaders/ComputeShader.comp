#version 430
layout (local_size_x = 32, local_size_y = 32, local_size_z = 1) in;
layout (rgba32f, binding = 0) uniform image2D img_output;

void main () 
{
//first section sets up the pixel initially, and the ray that will be thrown
	vec4 pixel = vec4 (0.0, 0.0, 0.0, 1.0);
	ivec2 pixel_coords = ivec2 (gl_GlobalInvocationID.xy);
	float max_x = 5.0;
	float max_y = 5.0;
	ivec2 dims = imageSize (img_output);
	float x = (float(pixel_coords.x * 2 - dims.x) / dims.x);
	float y = (float(pixel_coords.y * 2 - dims.y) / dims.y);
	vec3 ray_o = vec3 (x * max_x, y * max_y, 0.0);
	vec3 ray_d = vec3 (0.0, 0.0, -1.0); // ortho

//sets up the circle that will be raycasted
	vec3 sphere_c = vec3 (0.0, 0.0, -10.0);
	float sphere_r = 1.0;

//the actual raycasting bit
	vec3 omc = ray_o - sphere_c;
	float b = dot (ray_d, omc);
	float c = dot (omc, omc) - sphere_r * sphere_r;
	float bsqmc = b * b - c;
	float t = 10000.0;
	// hit one or both sides
	
	if (bsqmc > 0.2) 
	{
		pixel = vec4 (cos(2.0), 0.4, 1.0, 1.0);
	}
	else if (bsqmc > 0.1) 
	{
		pixel = vec4 (sin(4.0/sin(4.0)), 0.4, 1.0, 1.0);
	}
	else if(bsqmc > 0.001)
	{
		pixel = vec4(0.9, 0.01, 0.0, 1.0);
	}
	else
	{
		pixel = vec4(0.1, 0.1, 0.1, 1.0);
	}
		
//stores the result in the texture
	imageStore (img_output, pixel_coords, pixel);
}