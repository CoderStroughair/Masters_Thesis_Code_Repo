#version 430
layout (local_size_x = 32, local_size_y = 32, local_size_z = 1) in;
layout (r8, binding = 0) uniform image3D visualTexture;

uniform sampler1D transferFunc;
uniform sampler3D volumeData;

uniform vec3 camPos;

uniform int maxRaySteps;
uniform float rayStepSize;
uniform float gradientStepSize;

ivec3 dims;

//Based on Anton's formula: x = (2*p.x - dims.x)/dims.x to bring to range of (-1,1).
//Change to x = (2*p.x - dims.x)/2 = p.x - dims.x/2 to bring to range of (-dims.x/2, dims.x/2)
//Inverted to give p.x = x + dims.x/2

vec4 checkColour(vec3 rayPosition)
{
	//First, we need to convert back to object coordinates
	vec3 rayPositionObjSpace;
	rayPositionObjSpace.x = rayPosition.x + dims.x/2;
	rayPositionObjSpace.y = rayPosition.y + dims.y/2;
	rayPositionObjSpace.z = rayPosition.z + dims.z/2;
}


void main()
{
	int i = 0;
	float totalVisibility = 0;
	dims = imageSize(visualTexture);	
	vec3 position = vec3(gl_GlobalInvocationID.xyz);
	vec3 direction = position - camPos;

	vec4 colour;
	float[1000] opacities;
	vec3[1000] texCoords;

	for (i = 0; i < maxRaySteps; i++)
	{
		float opacity = 0.0f;
		texCoords[i] = (position + 1.0f)/2.0f;
		float index = texture(volumeData, texCoords[i]).x;

		opacity = vec4(texture(transferFunc, index)).w; 
		opacities[i] = opacity;
		totalVisibility += opacity;

		position = position + (direction * rayStepSize);
		if (abs(position.x) > 1.0f || abs(position.y) > 1.0f || abs(position.z) > 1.0f || totalVisibility >= 1.0f)
			break;
	}
	for (int j = 0; j < i; j++)
	{
		position = round(texCoords[j]);
		colour = vec4(clamp(opacities[j], 0.2, 0.9), 0.0, 0.0, 1.0);
		imageStore(visualTexture, ivec3(position), colour);
	}
}