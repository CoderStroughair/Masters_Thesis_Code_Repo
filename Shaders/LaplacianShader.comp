#version 430
layout (local_size_x = 32, local_size_y = 32, local_size_z = 1) in;
layout (r8, binding = 0) uniform image3D volumeData;
layout (r8, binding = 1) uniform image3D laplacian;

uniform sampler1D transferFunc;

uniform float lowerLimit;

float kernel3D[3][3][3] = {	// 3DArray[x][y][z]
	{//[x = 0]
		{0.0, 0.0, 0.0}, //[y = 0]
		{0.0, -1.0, 0.0}, //[y = 1]
		{0.0, 0.0, 0.0}  //[y = 2]
	},
	{//[x = 1]
		{0.0, -1.0, 0.0},
		{-1.0,6.0, -1.0},
		{0.0, -1.0, 0.0}
	},
	{//[x = 2]
		{0.0, 0.0, 0.0},
		{0.0, -1.0, 0.0},
		{0.0, 0.0, 0.0}
	}
};

void main()
{
	vec3 dims = imageSize(volumeData);
	vec3 position = gl_GlobalInvocationID.xyz;
	float total = 0;

	for (int x = -1; x < 2; x++)
	{
		for (int y = -1; y < 2; y++)
		{
			for (int z = -1; z < 2; z++)
			{
				ivec3 pixel_pos = ivec3(x+position.x,y+position.y,z+position.z);
				
				vec4 colour = texture(transferFunc, imageLoad(volumeData, pixel_pos).x);
				float intensity = length(colour.xyz)/length(vec3(1,1,1));
				intensity *= colour.w;
				total += intensity * kernel3D[x+1][y+1][z+1];
			}
		}
	}
	/*OPTIONAL*/
	if (total <= lowerLimit)
		total = 0.0f;
	/*END_OPTIONAL*/
	imageStore(laplacian, ivec3(gl_GlobalInvocationID), vec4(total, 0.0, 0.0, 1.0));
}
